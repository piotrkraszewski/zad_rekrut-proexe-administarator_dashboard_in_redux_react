{"version":3,"sources":["redux/user/Users.js","images/BgGreen.jpg","AppFiles/DeleteConfirmModal.js","AppFiles/UsersDashboard.js","hooks/useInput.js","AppFiles/AddItem.js","App.js","testingFiles/serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["slice","createSlice","name","initialState","loading","users","error","reducers","addNewUser","state","action","push","id","undefined","length","payload","email","username","address","city","deleteNew","newUsersArr","filter","user","fetchUsersRequest","fetchUsersSuccess","fetchUsersFailure","actions","ConfirmModal","open","onClose","deleteUser","className","exitBeforeEnter","div","initial","opacity","zIndex","animate","exit","transition","duration","onClick","UserContainer","reduxUsersData","useSelector","dispatch","useDispatch","useState","usersData","setUserData","isDeleteConfirmModalOpen","setIsDeleteConfirmModalOpen","itemToDelete","setItemToDelete","sortOrder","setSortOrder","selectedCol","setSelectedCol","useEffect","sort","e","order","colName","target","orderBy","toLowerCase","to","scope","map","item","preventDefault","console","log","openDeleteUserModal","initialVal","value","setValue","useInput","changeName","changeUsername","changeEmail","changeCity","nameErr","setNameErr","usernameErr","setUsernameErr","emailErr","setEmailErr","cityErr","setCityErr","history","useHistory","validate","isValid","includes","htmlFor","type","placeholder","onChange","required","App","a","axios","get","response","data","message","exact","path","render","src","BgGreen","Boolean","window","location","hostname","match","combineReducers","User","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","concat","logger","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d8d419ef.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { createSlice } from '@reduxjs/toolkit'\r\n\r\n\r\nconst slice = createSlice({\r\n  name: 'users',\r\n  initialState: {\r\n    loading: false,\r\n    users: [],\r\n    error: ''\r\n  },\r\n  reducers: {\r\n    addNewUser: (state, action) => {\r\n      state.users.push({\r\n        id: state.users[0] != undefined ? state.users[state.users.length - 1].id + 1 : 1,\r\n        name: action.payload.name,\r\n        email: action.payload.email,\r\n        username: action.payload.username,\r\n        address: {\r\n          city: action.payload.city\r\n        }\r\n      })\r\n    },\r\n    deleteNew: (state, action) => {\r\n      const newUsersArr = state.users.filter((user) => user.id !== action.payload.id)\r\n      return {\r\n        ...state,\r\n        users: newUsersArr,\r\n      }\r\n    },\r\n    fetchUsersRequest: (state) => ({\r\n      ...state,\r\n      loading: true\r\n    }),\r\n    fetchUsersSuccess: (state, action) => ({\r\n      loading: false,\r\n      users: action.payload,\r\n      error: ''\r\n    }),\r\n    fetchUsersFailure: (state, action) => ({\r\n      loading: false,\r\n      users: [],\r\n      error: action.payload\r\n    })\r\n  }\r\n})\r\n// console.log(slice)\r\n\r\n\r\nexport const {fetchUsersRequest, fetchUsersSuccess, fetchUsersFailure, addNewUser, deleteNew} = slice.actions\r\nexport default slice.reducer\r\n\r\n\r\n\r\n//=====================\r\nexport const fetchUsers = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchUsersRequest()) // sets loading to true\r\n    try{\r\n      const response = await axios.get('https://my-json-server.typicode.com/karolkproexe/jsonplaceholderdb/data')\r\n      dispatch(fetchUsersSuccess(response.data))\r\n    } catch(err) {\r\n      dispatch(fetchUsersFailure(err.message))\r\n    }\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/BgGreen.a17d9a1b.jpg\";","import React from 'react'\nimport { motion, AnimatePresence } from \"framer-motion\"\n\nexport default function ConfirmModal({open, onClose, deleteUser}) {\n  return (\n    <div className='DeleteConfirmModal-animation'>\n    <AnimatePresence exitBeforeEnter>\n    {open && (\n      <motion.div \n        initial={{ opacity: 0, zIndex: 3000 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.25}}\n      >\n      <div className='Modal-Overlay'/>\n      <div className='Modal-Style DeleteConfirmModal'>\n        <div>\n          <h4>Do you really want to delete this user?</h4>\n        </div>\n        <div className='confirmation-buttons'>\n          <button className='btn btn-danger btn-confirmation' onClick={deleteUser}>Yes</button>\n          <button className='btn btn-primary btn-confirmation' onClick={onClose}>No</button>\n        </div>\n      </div>\n    </motion.div>)}\n    </AnimatePresence>\n    </div>\n  )\n}\n","import { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { deleteNew } from '../redux'\r\nimport orderBy from 'lodash/orderBy'\r\n\r\nimport DeleteConfirmModal from './DeleteConfirmModal'\r\n\r\nexport default function UserContainer() {\r\n  const reduxUsersData = useSelector(state => state.user.users)\r\n  const dispatch = useDispatch()\r\n\r\n  const [usersData, setUserData] = useState([])\r\n  const [isDeleteConfirmModalOpen, setIsDeleteConfirmModalOpen] = useState(false)\r\n  const [itemToDelete, setItemToDelete] = useState()\r\n  const [sortOrder, setSortOrder] = useState('asc')\r\n  const [selectedCol, setSelectedCol] = useState('')\r\n\r\n  useEffect(() => {\r\n    setUserData(reduxUsersData)\r\n  }, [reduxUsersData])\r\n\r\n\r\n  const openDeleteUserModal = (e, id) => {\r\n    e.preventDefault()\r\n    console.log(id)\r\n    setItemToDelete(id)\r\n    setIsDeleteConfirmModalOpen(true)\r\n  }\r\n\r\n\r\n  const deleteUser = () => {\r\n    dispatch(deleteNew({id: itemToDelete}))\r\n    setIsDeleteConfirmModalOpen(false)\r\n  }\r\n\r\n  const sort = (e) => {\r\n    const colName = e.target.id\r\n    let order\r\n\r\n    if(selectedCol !== e.target.id)\r\n      order = 'asc'\r\n    else \r\n      sortOrder === 'asc' ? order = 'desc' : order = 'asc'\r\n    \r\n    setSortOrder(order)\r\n    setSelectedCol(e.target.id)\r\n    if(colName === 'address.city'){\r\n      setUserData(orderBy(usersData, [user => user.address.city.toLowerCase() ], order))\r\n    } else if (colName === 'id'){\r\n      setUserData(orderBy(usersData, colName, order))\r\n    } else {\r\n      setUserData(orderBy(usersData, [user => user[colName].toLowerCase() ], order))\r\n    }\r\n  }\r\n\r\n  return  (  \r\n    <div className='UsersDashboardElement'>\r\n      <div className='UsersDashboardConainer'>\r\n        <h1>Dashboard</h1>\r\n        <div className='tableContainer col-xl-2 col-md-3 col-4'>\r\n          <div className='topTable'>\r\n            <div className='userList'>\r\n              <h3>User list</h3>\r\n            </div>\r\n            <div>\r\n              <Link to='/additem' className='linkStyle'>\r\n                <button className='addNew btn btn-primary'>Add new</button>\r\n              </Link>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='resTable'>\r\n          <table className=\"table\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\" id='id' className='sort' onClick={(e) => sort(e)}>Id</th>\r\n                <th scope=\"col\" id='name' className='sort' onClick={(e) => sort(e)}>Name</th>\r\n                <th scope=\"col\" id='username' className='sort' onClick={(e) => sort(e)}>Username</th>\r\n                <th scope=\"col\" id='email' className='sort' onClick={(e) => sort(e)}>Email</th>\r\n                <th scope=\"col\" id='address.city' className='sort' onClick={(e) => sort(e)}>City</th>\r\n                <th scope=\"col\">Edit</th>\r\n                <th scope=\"col\">Delete</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {usersData.length > 0 && usersData.map((item) => \r\n                <tr key={item.id}>\r\n                  <th scope=\"row\">{item.id}</th>\r\n                  <td>{item.name}</td>\r\n                  <td>{item.username}</td>\r\n                  <td>{item.email}</td>\r\n                  <td>{item.address.city}</td>\r\n                  <td>\r\n                    <button \r\n                      className='btn btn-warning'\r\n                    >edit</button>\r\n                  </td>\r\n                  <td>\r\n                    <button \r\n                      className='btn btn-danger'\r\n                      onClick={e => openDeleteUserModal(e, item.id)}\r\n                    >delete</button>\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n\r\n          <div className='noUsers'>\r\n            {!usersData.length && 'No users in database'}\r\n          </div>\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <DeleteConfirmModal \r\n        open={isDeleteConfirmModalOpen} \r\n        onClose={() => setIsDeleteConfirmModalOpen(false)} \r\n        deleteUser={deleteUser} \r\n      /> \r\n\r\n    </div>\r\n  )\r\n}","import {useState} from 'react'\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal)\n  const changeForm = (e) => {\n    setValue(e.target.value)\n  }\n  const resetForm = () =>{\n    setValue('')\n  }\n  return [value, setValue, changeForm, resetForm]\n}","import { useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { Link, useHistory  } from 'react-router-dom'\r\nimport useInput from '../hooks/useInput'\r\nimport { addNewUser } from '../redux'\r\n\r\nexport default function UserContainer() {\r\n  const [name, setName, changeName, resetName] = useInput('')\r\n  const [username, setUsername, changeUsername, resetUsername] = useInput('')\r\n  const [email, setEmail, changeEmail, resetEmail] = useInput('')\r\n  const [city, setCity, changeCity, resetCity] = useInput('')\r\n\r\n  const [nameErr, setNameErr] = useState('')\r\n  const [usernameErr, setUsernameErr] = useState('')\r\n  const [emailErr, setEmailErr] = useState('')\r\n  const [cityErr, setCityErr] = useState('')\r\n  \r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const chandleSubmit = (e) => {\r\n    e.preventDefault()\r\n    // reseting error state\r\n    setNameErr('')\r\n    setUsernameErr('')\r\n    setEmailErr('')\r\n    setCityErr('')\r\n\r\n    const isValid = validate()\r\n    console.log(isValid)\r\n    if(isValid){\r\n      dispatch(addNewUser({\r\n        name: name,\r\n        username: username,\r\n        email: email,\r\n        city: city,\r\n      }))\r\n      // przekieruj na strone\r\n      history.push(\"/\");\r\n    }\r\n  } \r\n\r\n  const validate = () => {\r\n    let isValid = true\r\n    if(name === ''){\r\n      setNameErr('name input is mandatory')\r\n      isValid = false\r\n    }\r\n    if(username === ''){\r\n      setUsernameErr('username input is mandatory')\r\n      isValid = false\r\n    }\r\n    if(email === ''){\r\n      setEmailErr('email input is mandatory')\r\n      isValid = false\r\n    }\r\n    if(!email.includes('@')){\r\n      setEmailErr(\"invalid email. You didn't add @\")\r\n      isValid = false\r\n    }\r\n    if(city === ''){\r\n      setCityErr('city input is mandatory')\r\n      isValid = false\r\n    }\r\n\r\n    return isValid\r\n  }\r\n\r\n  return (  \r\n    <div className='UsersDashboardElement'>\r\n      <div className='UsersDashboardConainer'>\r\n        <h1>Dashboard</h1>\r\n        <div className='formContainer col-xl-2 col-md-3 col-4'>\r\n          <div className='topForm'>\r\n            <h4>Form</h4>\r\n          </div>\r\n\r\n          <div className='bottomForm'>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"nameInp\">Name</label>\r\n                <input \r\n                  type=\"text\" \r\n                  className={'form-control ' + (nameErr &&'is-invalid')} \r\n                  id=\"nameInp\" \r\n                  placeholder=\"name\"\r\n                  value={name}\r\n                  onChange={changeName}\r\n                  required\r\n                />\r\n                <p className='formError'>{nameErr}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"usernameInput\">Username</label>\r\n                <input \r\n                  type=\"text\" \r\n                  className={'form-control ' + (usernameErr &&'is-invalid')}\r\n                  id=\"usernameInput\" \r\n                  placeholder=\"username\"\r\n                  value={username}\r\n                  onChange={changeUsername}\r\n                  required\r\n                />\r\n                <p className='formError'>{usernameErr}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"emailInput\">Email</label>\r\n                <input \r\n                  type=\"text\" \r\n                  className={'form-control ' + (emailErr &&'is-invalid')}\r\n                  id=\"emailInput\" \r\n                  placeholder=\"email\"\r\n                  value={email}\r\n                  onChange={changeEmail}\r\n                  required\r\n                />\r\n                <p className='formError'>{emailErr}</p>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"cityInput\">City</label>\r\n                <input \r\n                  type=\"text\" \r\n                  className={'form-control ' + (cityErr &&'is-invalid')}\r\n                  id=\"cityInput\" \r\n                  placeholder=\"city\"\r\n                  value={city}\r\n                  onChange={changeCity}\r\n                  required\r\n                />\r\n                <p className='formError'>{cityErr}</p>\r\n              </div>\r\n              <div className='formBtns'>\r\n                <Link to='/' className='linkStyle'>\r\n                  <button className=\"formBtn btn btn-warning\">Cancel</button>\r\n                </Link>\r\n                <button \r\n                  type=\"submit\" \r\n                  className=\"formBtn btn btn-primary\"\r\n                  onClick={chandleSubmit}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect } from 'react'\r\nimport './styles/main.scss'\r\nimport { fetchUsers } from './redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport BgGreen from './images/BgGreen.jpg'\r\nimport UsersDashboard from './AppFiles/UsersDashboard'\r\nimport AddItem from './AppFiles/AddItem'\r\n\r\nexport default function App () {\r\n  const dispatch = useDispatch()\r\n  // fetching data only onec\r\n  useEffect(async () => {\r\n    dispatch(fetchUsers())\r\n  }, [])\r\n\r\n  return (\r\n  <div>\r\n      <div className='cardsContainer'>\r\n        <Switch>\r\n          <Route exact path='/' render={() => <UsersDashboard/>} />\r\n          <Route exact path='/additem' render={() => <AddItem/>} />\r\n        </Switch>\r\n      </div>\r\n\r\n    <img src={BgGreen} className='BgImage'/>\r\n  </div>\r\n  )\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport User from './user/Users'\r\n\r\nexport default combineReducers({\r\n  user: User\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = configureStore({ \r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\r\n })\r\n\r\nexport default store","import ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './testingFiles/serviceWorker'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}